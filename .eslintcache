[{"/Volumes/Data/Resources/Study/java/courseman-react/src/index.js":"1","/Volumes/Data/Resources/Study/java/courseman-react/src/reportWebVitals.js":"2","/Volumes/Data/Resources/Study/java/courseman-react/src/App.js":"3","/Volumes/Data/Resources/Study/java/courseman-react/src/common/Navigation.js":"4","/Volumes/Data/Resources/Study/java/courseman-react/src/student/StudentList.js":"5","/Volumes/Data/Resources/Study/java/courseman-react/src/common/AutoDismissAlert.js":"6","/Volumes/Data/Resources/Study/java/courseman-react/src/common/DeleteConfirmation.js":"7","/Volumes/Data/Resources/Study/java/courseman-react/src/student/StudentAPI.js":"8","/Volumes/Data/Resources/Study/java/courseman-react/src/student/StudentCreate.js":"9","/Volumes/Data/Resources/Study/java/courseman-react/src/common/Constants.js":"10","/Volumes/Data/Resources/Study/java/courseman-react/src/student/StudentDetails.js":"11","/Volumes/Data/Resources/Study/java/courseman-react/src/student/index.js":"12","/Volumes/Data/Resources/Study/java/courseman-react/src/module/index.js":"13","/Volumes/Data/Resources/Study/java/courseman-react/src/module/ModuleList.js":"14","/Volumes/Data/Resources/Study/java/courseman-react/src/module/ModuleCreate.js":"15","/Volumes/Data/Resources/Study/java/courseman-react/src/module/ModuleAPI.js":"16","/Volumes/Data/Resources/Study/java/courseman-react/src/module/ModuleDetails.js":"17","/Volumes/Data/Resources/Study/java/courseman-react/src/enrolment/index.js":"18","/Volumes/Data/Resources/Study/java/courseman-react/src/enrolment/EnrolmentList.js":"19","/Volumes/Data/Resources/Study/java/courseman-react/src/enrolment/EnrolmentCreate.js":"20","/Volumes/Data/Resources/Study/java/courseman-react/src/enrolment/EnrolmentDetails.js":"21","/Volumes/Data/Resources/Study/java/courseman-react/src/enrolment/EnrolmentAPI.js":"22"},{"size":507,"mtime":1611841686930,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1611588247303,"results":"25","hashOfConfig":"24"},{"size":1074,"mtime":1612069556184,"results":"26","hashOfConfig":"24"},{"size":819,"mtime":1612064212341,"results":"27","hashOfConfig":"24"},{"size":4232,"mtime":1612059659952,"results":"28","hashOfConfig":"24"},{"size":517,"mtime":1611848016295,"results":"29","hashOfConfig":"24"},{"size":1351,"mtime":1611933642962,"results":"30","hashOfConfig":"24"},{"size":2024,"mtime":1611977057232,"results":"31","hashOfConfig":"24"},{"size":1845,"mtime":1611847984519,"results":"32","hashOfConfig":"24"},{"size":83,"mtime":1611669925923,"results":"33","hashOfConfig":"24"},{"size":2981,"mtime":1611933642966,"results":"34","hashOfConfig":"24"},{"size":69,"mtime":1612087169262,"results":"35","hashOfConfig":"24"},{"size":66,"mtime":1612087933811,"results":"36","hashOfConfig":"24"},{"size":5216,"mtime":1612074357462,"results":"37","hashOfConfig":"24"},{"size":3606,"mtime":1612024923111,"results":"38","hashOfConfig":"24"},{"size":2741,"mtime":1611978339575,"results":"39","hashOfConfig":"24"},{"size":5999,"mtime":1612061165385,"results":"40","hashOfConfig":"24"},{"size":636,"mtime":1612088833508,"results":"41","hashOfConfig":"24"},{"size":4380,"mtime":1612109926619,"results":"42","hashOfConfig":"24"},{"size":5122,"mtime":1612135385557,"results":"43","hashOfConfig":"24"},{"size":5900,"mtime":1612109839077,"results":"44","hashOfConfig":"24"},{"size":2063,"mtime":1612086668973,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"10vckkq",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Volumes/Data/Resources/Study/java/courseman-react/src/index.js",[],["96","97"],"/Volumes/Data/Resources/Study/java/courseman-react/src/reportWebVitals.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/App.js",["98"],"import Navigation from './common/Navigation';\nimport { Container } from 'react-bootstrap';\nimport StudentManager from './student';\nimport ModuleManager from './module';\nimport EnrolmentManager from './enrolment';\nimport { Link, Route, BrowserRouter as Router, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (<>\n    <Router>\n      <Navigation appName=\"CourseManApp\"\n        modules={[\n          { \"name\": \"Manage students\", \"link\": \"/students\" },\n          { \"name\": \"Manage course modules\", \"link\": \"/modules\" },\n          { \"name\": \"Manage enrolments\", \"link\": \"/enrolments\" }\n        ]} />\n      <Container>\n        <Switch>\n          <Route path=\"/students\">\n            <StudentManager title=\"Manage students\" />\n          </Route>\n          <Router path=\"/modules\">\n            <ModuleManager title=\"Manage course modules\" />\n          </Router>\n          <Router path=\"/enrolments\">\n            <EnrolmentManager title=\"Manage enrolments\" />\n          </Router>\n        </Switch>\n      </Container>\n      \n    </Router>\n  </>\n  );\n}\n\nexport default App;\n","/Volumes/Data/Resources/Study/java/courseman-react/src/common/Navigation.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/student/StudentList.js",["99","100"],"import React, { useEffect, useState } from 'react';\nimport { Button, Col, Form, FormControl, Row, Table } from 'react-bootstrap';\nimport AutoDismissAlert from '../common/AutoDismissAlert';\nimport studentAPI from \"./StudentAPI\";\nimport StudentCreate from './StudentCreate';\nimport StudentDetails from './StudentDetails';\n\nexport default function StudentList(props) {\n  const [studentList, setStudentList] = useState([]);\n  const [currentPage, setCurrentPage] = useState(undefined);\n  const [pageCount, setPageCount] = useState(undefined);\n  const [alert, setAlert] = useState(undefined);\n\n  useEffect(() => studentAPI.getFirstPage(\n      response => {\n        setStudentList(response.content);\n        setPageCount(response.pageCount);\n        setCurrentPage(response.currentPage);\n      }, \n      err => window.alert(err)\n    ), [studentList.length]);\n\n  const addToStudentList = student => setStudentList(studentList.concat(student));\n  \n  const onCreateSuccess = (student) => {\n    addToStudentList(student);\n    setAlert(<AutoDismissAlert variant=\"success\" heading=\"Create successfully\" \n              text={`Successfully created resource with id ${student.id}!`}\n              onDisposed={() => setAlert(undefined)} />);\n  };\n  const onCreateFailure = (err) => {\n    setAlert(<AutoDismissAlert variant=\"success\" heading=\"Failed to create\" \n              text={`Cannot create resource! Reason: ${err}!`}\n              onDisposed={() => setAlert(undefined)} />)\n  };\n\n  const deleteAction = (id) => {\n    const onDeleteSuccess = () => {\n      setStudentList(studentList.filter(s => s.id !== id));\n      setAlert(<AutoDismissAlert variant=\"success\" heading=\"Delete successfully\" \n                text={`Successfully deleted resource with id ${id}!`}\n                onDisposed={() => setAlert(undefined)} />);\n    };\n    const onDeleteFailure = (err) => {\n      setAlert(<AutoDismissAlert variant=\"success\" heading=\"Failed to delete\" \n                text={`Cannot deleted resource with id ${id}! Reason: ${err}!`}\n                onDisposed={() => setAlert(undefined)} />)\n    };\n    studentAPI.deleteById(id, onDeleteSuccess, onDeleteFailure);\n  }\n\n  const updateAction = (student) => {\n    const onUpdateSuccess = (updatedStudent) => {\n      const index = studentList.findIndex(s => s.id === student.id);\n      const before = studentList.slice(0, index);\n      const after = studentList.slice(index + 1);\n      const newStudentList = before.concat(updatedStudent).concat(after);\n      setStudentList(newStudentList);\n      setAlert(<AutoDismissAlert variant=\"success\" heading=\"Update successfully\" \n                text={`Successfully updated resource with id ${student.id}!`}\n                onDisposed={() => setAlert(undefined)} />)\n    };\n    const onUpdateFailure = (err) => {\n      setAlert(<AutoDismissAlert variant=\"success\" heading=\"Failed to delete\" \n                text={`Cannot deleted resource with id ${student.id}! Reason: ${err}!`}\n                onDisposed={() => setAlert(undefined)} />);\n    };\n    studentAPI.updateById(student.id, student, onUpdateSuccess, onUpdateFailure);\n  }\n\n  // todo: set the alert\n  return (\n    <>\n      {alert ? alert : \"\"}\n      <h2 className=\"my-4 text-center\">{props.title}</h2>\n      <Row className=\"my-3\">\n        <Col>\n          <StudentCreate onSuccess={onCreateSuccess} onFailure={onCreateFailure} />\n        </Col>\n        <Col></Col>\n        <Col md={5}>\n          <Form className=\"d-flex\" inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mx-1\" />\n            <Button variant=\"outline-success\">Search</Button>\n          </Form>\n        </Col>\n      </Row>\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th className=\"col-md-1\">#</th>\n            <th className=\"col-md-2\">ID</th>\n            <th className=\"col-md-7\">Name</th>\n            <th className=\"col-md-2\">Date of birth</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {studentList.map((student, index) =>\n            <StudentDetails key={student.id} {...student} index={index + 1}\n                updateAction={updateAction}\n                deleteAction={deleteAction} />)}\n        </tbody>\n      </Table>\n    </>\n  )\n\n}","/Volumes/Data/Resources/Study/java/courseman-react/src/common/AutoDismissAlert.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/common/DeleteConfirmation.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/student/StudentAPI.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/student/StudentCreate.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/common/Constants.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/student/StudentDetails.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/student/index.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/module/index.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/module/ModuleList.js",["101","102"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Col, Form, FormControl, Row, Table } from \"react-bootstrap\";\nimport AutoDismissAlert from \"../common/AutoDismissAlert\";\nimport moduleAPI from \"./ModuleAPI\";\nimport ModuleCreate from \"./ModuleCreate\";\nimport ModuleDetails from \"./ModuleDetails\";\n\nexport default function ModuleList(props) {\n  const [moduleList, setModuleList] = useState([]);\n  const [pageCount, setPageCount] = useState(undefined);\n  const [currentPage, setCurrentPage] = useState(undefined);\n  const [filteredType, setFilteredType] = useState(\"0\");\n  const [alert, setAlert] = useState(undefined);\n\n  const onGetSuccess = response => {\n    setModuleList(response.content);\n    setPageCount(response.pageCount);\n    setCurrentPage(response.currentPage);\n  };\n\n  const onGetFailure = err => window.alert(err);\n\n  const addToModuleList = module => setModuleList(moduleList.concat(module).sort((x, y) => y.compulsory - x.compulsory));\n  \n  const onCreateSuccess = (module) => {\n    addToModuleList(module);\n    setAlert(<AutoDismissAlert variant=\"success\" heading=\"Create successfully\" \n              text={`Successfully created resource with id ${module.id}!`}\n              onDisposed={() => setAlert(undefined)} />);\n  };\n  const onCreateFailure = (err) => {\n    setAlert(<AutoDismissAlert variant=\"success\" heading=\"Failed to create\" \n              text={`Cannot create resource! Reason: ${err}!`}\n              onDisposed={() => setAlert(undefined)} />)\n  };\n\n  const deleteAction = (id) => {\n    const onDeleteSuccess = () => {\n      setModuleList(moduleList.filter(s => s.id !== id));\n      setAlert(<AutoDismissAlert variant=\"success\" heading=\"Delete successfully\" \n                text={`Successfully deleted resource with id ${id}!`}\n                onDisposed={() => setAlert(undefined)} />);\n    };\n    const onDeleteFailure = (err) => {\n      setAlert(<AutoDismissAlert variant=\"success\" heading=\"Failed to delete\" \n                text={`Cannot deleted resource with id ${id}! Reason: ${err}!`}\n                onDisposed={() => setAlert(undefined)} />)\n    };\n    moduleAPI.deleteById(id, onDeleteSuccess, onDeleteFailure);\n  };\n\n  const updateAction = (module) => {\n    const onUpdateSuccess = (updatedModule) => {\n      const index = moduleList.findIndex(s => s.id === module.id);\n      const before = moduleList.slice(0, index);\n      const after = moduleList.slice(index + 1);\n      const newModuleList = before.concat(updatedModule).concat(after);\n      setModuleList(newModuleList);\n      setAlert(<AutoDismissAlert variant=\"success\" heading=\"Update successfully\" \n                text={`Successfully updated resource with id ${module.id}!`}\n                onDisposed={() => setAlert(undefined)} />)\n    };\n    const onUpdateFailure = (err) => {\n      setAlert(<AutoDismissAlert variant=\"success\" heading=\"Failed to delete\" \n                text={`Cannot deleted resource with id ${module.id}! Reason: ${err}!`}\n                onDisposed={() => setAlert(undefined)} />);\n    };\n    moduleAPI.updateById(module.id, module, onUpdateSuccess, onUpdateFailure);\n  };\n\n  const filterByType = () => {\n    if (filteredType !== \"0\") {\n      moduleAPI.getFirstPageByType(filteredType, onGetSuccess, onGetFailure);\n    } else {\n      moduleAPI.getFirstPage(onGetSuccess, onGetFailure);\n    }\n  };\n\n  useEffect(() => moduleAPI.getFirstPage(\n    onGetSuccess, \n    onGetFailure\n  ), []);\n\n  useEffect(filterByType, [filteredType])\n\n  return (\n    <>\n      {alert ? alert : \"\"}\n      <h2 className=\"my-4 text-center\">{props.title}</h2>\n      <Row className=\"my-3\">\n        <Col>\n          <ModuleCreate onSuccess={onCreateSuccess} onFailure={onCreateFailure} />\n        </Col>\n        <Col></Col>\n        <Col md={7}>\n          <Form className=\"d-flex\" inline>\n            <select className=\"form-select\" aria-label=\"Module type\" defaultValue=\"0\"\n              onChange={e => {\n                setFilteredType(e.target.value);\n              }}>\n              <option value=\"0\">&lt;Module type&gt;</option>\n              <option value=\"compulsory\">Compulsory</option>\n              <option value=\"elective\">Elective</option>\n            </select>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mx-1\" />\n            <Button variant=\"outline-success\">Search</Button>\n          </Form>\n        </Col>\n      </Row>\n\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th className=\"col-md-1\">#</th>\n            <th className=\"col-md-1\">ID</th>\n            <th className=\"col-md-2\">Code</th>\n            <th className=\"col-md-5\">Name</th>\n            <th className=\"col-md-1\">Semester</th>\n            <th className=\"col-md-1\">Credits</th>\n            { filteredType !== \"0\" ? null\n            : <th className=\"col-md-1\">Compulsory?</th>}\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {moduleList.map((module, index) =>\n            module.hidden === true ? null : \n            <ModuleDetails {...module} index={index} filtering={filteredType !== \"0\"}\n              key={module.id} updateAction={updateAction}\n              deleteAction={deleteAction} />)}\n        </tbody>\n      </Table>\n    </>\n  );\n}","/Volumes/Data/Resources/Study/java/courseman-react/src/module/ModuleCreate.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/module/ModuleAPI.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/module/ModuleDetails.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/enrolment/index.js",[],"/Volumes/Data/Resources/Study/java/courseman-react/src/enrolment/EnrolmentList.js",["103","104"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Col, Form, FormControl, Row, Table } from \"react-bootstrap\";\nimport AutoDismissAlert from \"../common/AutoDismissAlert\";\nimport enrolmentAPI from \"./EnrolmentAPI\";\nimport EnrolmentCreate from \"./EnrolmentCreate\";\nimport EnrolmentDetails from \"./EnrolmentDetails\";\n\nexport default function EnrolmentList(props) {\n  const [enrolmentList, setEnrolmentList] = useState([]);\n  const [currentPage, setCurrentPage] = useState(undefined);\n  const [pageCount, setPageCount] = useState(undefined);\n  const [alert, setAlert] = useState(undefined);\n\n  const addToEnrolmentList = enrolment => setEnrolmentList(enrolmentList.concat(enrolment));\n  \n  const onCreateSuccess = (enrolment) => {\n    addToEnrolmentList(enrolment);\n    setAlert(<AutoDismissAlert variant=\"success\" heading=\"Create successfully\" \n              text={`Successfully created resource with id ${enrolment.id}!`}\n              onDisposed={() => setAlert(undefined)} />);\n  };\n  const onCreateFailure = (err) => {\n    setAlert(<AutoDismissAlert variant=\"success\" heading=\"Failed to create\" \n              text={`Cannot create resource! Reason: ${err}!`}\n              onDisposed={() => setAlert(undefined)} />)\n  };\n\n  const deleteAction = (id) => {\n    const onDeleteSuccess = () => {\n      setEnrolmentList(enrolmentList.filter(s => s.id !== id));\n      setAlert(<AutoDismissAlert variant=\"success\" heading=\"Delete successfully\" \n                text={`Successfully deleted resource with id ${id}!`}\n                onDisposed={() => setAlert(undefined)} />);\n    };\n    const onDeleteFailure = (err) => {\n      setAlert(<AutoDismissAlert variant=\"success\" heading=\"Failed to delete\" \n                text={`Cannot deleted resource with id ${id}! Reason: ${err}!`}\n                onDisposed={() => setAlert(undefined)} />)\n    };\n    enrolmentAPI.deleteById(id, onDeleteSuccess, onDeleteFailure);\n  }\n\n  const updateAction = (enrolment) => {\n    const onUpdateSuccess = (updatedEnrolment) => {\n      const index = enrolmentList.findIndex(s => s.id === enrolment.id);\n      const before = enrolmentList.slice(0, index);\n      const after = enrolmentList.slice(index + 1);\n      const newEnrolmentList = before.concat(updatedEnrolment).concat(after);\n      setEnrolmentList(newEnrolmentList);\n      setAlert(<AutoDismissAlert variant=\"success\" heading=\"Update successfully\" \n                text={`Successfully updated resource with id ${enrolment.id}!`}\n                onDisposed={() => setAlert(undefined)} />)\n    };\n    const onUpdateFailure = (err) => {\n      setAlert(<AutoDismissAlert variant=\"success\" heading=\"Failed to delete\" \n                text={`Cannot deleted resource with id ${enrolment.id}! Reason: ${err}!`}\n                onDisposed={() => setAlert(undefined)} />);\n    };\n    enrolmentAPI.updateById(enrolment.id, enrolment, onUpdateSuccess, onUpdateFailure);\n  }\n\n  useEffect(() => enrolmentAPI.getFirstPage(\n    response => {\n      setEnrolmentList(response.content);\n      setPageCount(response.pageCount);\n      setCurrentPage(response.currentPage);\n    }, \n    err => window.alert(err)\n  ), [enrolmentList.length]);\n\n  return (\n    <>\n      {alert ? alert : \"\"}\n      <h2 className=\"my-4 text-center\">{props.title}</h2>\n      <Row className=\"my-3\">\n        <Col>\n          <EnrolmentCreate updateField={props.updateField}\n            onSuccess={onCreateSuccess} onFailure={onCreateFailure} />\n        </Col>\n        <Col></Col>\n        <Col md={5}>\n          <Form className=\"d-flex\" inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mx-1\" />\n            <Button variant=\"outline-success\">Search</Button>\n          </Form>\n        </Col>\n      </Row>\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th className=\"col-md-1\">#</th>\n            <th className=\"col-md-2\">ID</th>\n            <th className=\"col-md-4\">Student name</th>\n            <th className=\"col-md-4\">Course name</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {enrolmentList.map((enrolment, index) =>\n            <EnrolmentDetails key={enrolment.id} {...enrolment} index={index + 1}\n                updateAction={updateAction}\n                updateField={props.updateField}\n                deleteAction={deleteAction} />)}\n        </tbody>\n      </Table>\n    </>\n  )\n}","/Volumes/Data/Resources/Study/java/courseman-react/src/enrolment/EnrolmentCreate.js",["105","106"],"/Volumes/Data/Resources/Study/java/courseman-react/src/enrolment/EnrolmentDetails.js",["107","108"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Form, FormControl, FormGroup, FormText, Modal } from \"react-bootstrap\";\nimport DeleteConfirmation from \"../common/DeleteConfirmation\";\n\nfunction EnrolmentDetailsLine(props) {\n  const verticalAlignCell = { verticalAlign: \"middle\" };\n\n  return (\n    <>\n      <tr style={{ cursor: \"pointer\" }}>\n        <td style={verticalAlignCell} onClick={props.onClick}>{props.index}</td>\n        <td style={verticalAlignCell} onClick={props.onClick}>{props.id}</td>\n        <td style={verticalAlignCell} onClick={props.onClick}>{props.student.name}</td>\n        <td style={verticalAlignCell} onClick={props.onClick}>{props.module.name}</td>\n        <td style={verticalAlignCell}>\n          <DeleteConfirmation action={() => props.deleteAction(props.id)} />\n        </td>\n      </tr>\n    </>\n  )\n}\n\nexport default function EnrolmentDetails(props) {\n  const [show, setShow] = useState(false);\n  const [hasModal, setHasModal] = useState(false);\n  const [moduleId, setModuleId] = useState(props.module.id);\n  const [studentId, setStudentId] = useState(props.student.id);\n  const [module, setModule] = useState(props.module);\n  const [student, setStudent] = useState(props.student);\n  const [internal, setInternal] = useState(props.internalMark);\n  const [exam, setExam] = useState(props.examMark)\n  const [changed, setChanged] = useState(false);\n\n  const resetState = () => {\n    setModuleId(props.module.id);\n    setStudentId(props.student.id);\n    setModule(props.module);\n    setStudent(props.student);\n    setInternal(props.internalMark);\n    setExam(props.examMark);\n    setChanged(false);\n  };\n\n  const handleClose = () => {\n    setShow(false);\n    resetState();\n  };\n\n  const handleShow = () => {\n    setShow(true);\n    setHasModal(true);\n  };\n\n  const handleChange = (student, module) => {\n    if (!module.id || !student.id) {\n      setChanged(false);\n      return;\n    }\n    setChanged(studentId !== props.student.id\n      || moduleId !== props.module.id\n      || internal !== props.internalMark\n      || exam !== props.examMark);\n  }\n  \n  const getSubmitBody = () => {\n    const core = {\n      \"id\": props.id,\n      \"student\": student,\n      \"module\": module\n    };\n    if (internal >= 0 && exam >= 0) {\n      return {\n        ...core,\n        \"internalMark\": internal,\n        \"examMark\": exam\n      };\n    } else if (internal < 0) {\n      return {\n        ...core,\n        \"examMark\": exam\n      };\n    } else if (exam < 0) {\n      return {\n        ...core,\n        \"internalMark\": internal\n      }\n    }\n  };\n\n  const handleUpdate = () => {\n    props.updateAction(getSubmitBody());\n    handleClose();\n  };\n\n  const updateStudent = (event) => {\n    props.updateField(\n      \"student\", studentId,\n      setStudent,\n      err => window.alert(err)\n    );\n  };\n\n  const updateModule = (event) => {\n    props.updateField(\n      \"module\", moduleId,\n      setModule,\n      err => window.alert(err)\n    );\n  };\n\n  useEffect(() => {\n    handleChange(student, module);\n  }, [studentId, moduleId, student, module, internal, exam]);\n\n  return (\n    <>\n      <EnrolmentDetailsLine onClick={handleShow} {...props} />\n      {hasModal === true ? \n      <Modal show={show} onHide={handleClose} size=\"lg\"\n        onExited={() => setHasModal(false)}>\n        <Modal.Header>\n          <Modal.Title>Enrolment details</Modal.Title>\n          <button type=\"button\" className=\"btn-close btn-sm\" onClick={handleClose}></button>\n        </Modal.Header>\n        \n        <Modal.Body>\n          <Form>\n            <FormGroup>\n              <Form.Label>ID: </Form.Label>\n              <FormControl type=\"text\" value={props.id} disabled />\n            </FormGroup>\n            <br />\n            <FormGroup>\n              <Form.Label>Student ID: </Form.Label>\n              <FormControl type=\"number\" value={studentId}\n                onChange={e => {\n                  setStudentId(Number(e.target.value));\n                  handleChange(student, module);\n                }} onBlur={updateStudent} />\n              <br />\n              <Form.Label>Student info: </Form.Label>\n              <FormControl type=\"text\" disabled value={`${student.name} - DOB: ${student.dob}`} />\n            </FormGroup>\n            <br />\n            <FormGroup>\n              <Form.Label>Module ID: </Form.Label>\n              <FormControl type=\"number\" value={moduleId} \n                onChange={e => {\n                  setModuleId(Number(e.target.value));\n                  handleChange(student, module);\n                }} onBlur={updateModule} />\n              <br />\n              <Form.Label>Module info: </Form.Label>\n              <FormControl as=\"textarea\" disabled style={{ resize: \"none\" }}\n                value={`${module.name} - Semester ${module.semester} - Credits: ${module.credits}`} />\n            </FormGroup>\n            <br />\n            <FormGroup>\n              <Form.Label>Internal mark: </Form.Label>\n              <FormControl type=\"number\" step={0.01} min={-0.01} max={10} value={internal} \n                onChange={e => setInternal(Number(e.target.value))} />\n              <br />\n              <Form.Label>Exam mark: </Form.Label>\n              <FormControl type=\"number\" step={0.01} min={-0.01} max={10} value={exam} \n                onChange={e => setExam(Number(e.target.value))} />\n              <br />\n              <Form.Label>Final grade: </Form.Label>\n              <FormControl type=\"text\" disabled value={props.finalGrade} />\n            </FormGroup>\n          </Form>\n        </Modal.Body>\n        \n        <Modal.Footer>\n          <Button variant=\"secondary\" size=\"sm\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" size=\"sm\" \n            onClick={handleUpdate} disabled={!changed}>\n            Update\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      : null}\n    </>\n  )\n};","/Volumes/Data/Resources/Study/java/courseman-react/src/enrolment/EnrolmentAPI.js",[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":6,"column":10,"nodeType":"115","messageId":"116","endLine":6,"endColumn":14},{"ruleId":"113","severity":1,"message":"117","line":10,"column":10,"nodeType":"115","messageId":"116","endLine":10,"endColumn":21},{"ruleId":"113","severity":1,"message":"118","line":11,"column":10,"nodeType":"115","messageId":"116","endLine":11,"endColumn":19},{"ruleId":"113","severity":1,"message":"118","line":10,"column":10,"nodeType":"115","messageId":"116","endLine":10,"endColumn":19},{"ruleId":"113","severity":1,"message":"117","line":11,"column":10,"nodeType":"115","messageId":"116","endLine":11,"endColumn":21},{"ruleId":"113","severity":1,"message":"117","line":10,"column":10,"nodeType":"115","messageId":"116","endLine":10,"endColumn":21},{"ruleId":"113","severity":1,"message":"118","line":11,"column":10,"nodeType":"115","messageId":"116","endLine":11,"endColumn":19},{"ruleId":"113","severity":1,"message":"119","line":14,"column":10,"nodeType":"115","messageId":"116","endLine":14,"endColumn":17},{"ruleId":"120","severity":1,"message":"121","line":93,"column":6,"nodeType":"122","endLine":93,"endColumn":60,"suggestions":"123"},{"ruleId":"113","severity":1,"message":"124","line":2,"column":48,"nodeType":"115","messageId":"116","endLine":2,"endColumn":56},{"ruleId":"120","severity":1,"message":"121","line":113,"column":6,"nodeType":"122","endLine":113,"endColumn":60,"suggestions":"125"},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'currentPage' is assigned a value but never used.","'pageCount' is assigned a value but never used.","'changed' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleChange'. Either include it or remove the dependency array.","ArrayExpression",["128"],"'FormText' is defined but never used.",["129"],"no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"130","fix":"132"},"Update the dependencies array to be: [studentId, moduleId, student, module, internal, exam, handleChange]",{"range":"133","text":"134"},{"range":"135","text":"134"},[2212,2266],"[studentId, moduleId, student, module, internal, exam, handleChange]",[3026,3080]]